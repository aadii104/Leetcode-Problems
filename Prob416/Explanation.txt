Link To Problem:-
https://leetcode.com/problems/partition-equal-subset-sum/description/

For all the approaches initially we will find the total sum of all the elements in the array, now if the sum is not divisible by 2 that is it can 
not be divided into two parts than we can easily return false, but if it is not odd than there is a chance that we can divide it into two equal sum 
subsets. So to check this we can use any of these two approaches.

Approach 1:-

Time Complexity:-O(N*S). Where N is given array length and S is half of total sum of all the elements.
Space Complexity:-O(N*S).

This is just like 0/1 Knapsack problem in which we have some elements and we have to make a target from these elements. In this problem we are in 
the same situation as we have some elements and we have to make array of elements such that their sum become half of total sum. So in this we are 
using a 2D matrix which will tell that for specific row let it be i and column j that if we have i elements(as in order to given array) than can we 
make sum=j from them or not. That is if dp[i][j] is true than it represents that we if we have starting i elements in array than we can make a sum 
of j from them. Now let us assume that we are initially at position (i,j), Now if we can form sum j with i-1 elements than we can also form sum j 
from i elements that is not including this element and hence we will make it true, but if it is not than we will check that if we will include nums
[i-1] than we have i-1 elements left and sum to form is j-nums[i-1] left so we will check that is it possible to form sum = j-nums[i-1] from i-1 , 
if it is true than we can also form sum j from i elements. Actually what we are doing here is that in the first condition we are checking that can 
we make sum j without including this element or not, if we can than their is no problem, but if we can't than we will check that can we make the sum 
by including this or not. So by doing this we can generate our whole matrix. If at any instance if we can form halfsum from any number of elements 
than we can say that we can partition this into 2 subsets of equal sum. So after competing a row we will check that if dp[i][halfSum] is true or not 
if it is true than we can return true else we will check next row.

Approach 2:-

Time Complexity:-O(N*S). Where N is given array length and S is half of total sum of all the elements.
Space Complexity:-O(S).

On observing above approach carefully it was found that we can use 1D array to solve the problem instead of using 2D array. So in this approach we 
are using 1D array and the rest concept is same.